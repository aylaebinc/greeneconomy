scipen=999
)
census_api_key("c8aa67e4086b4b5ce3a8717f59faa9a28f611dab", install = TRUE, overwrite = TRUE)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
codejs <- readr::read_lines("js/codefolding.js")
collapsejs <- readr::read_lines("js/collapse.js")
transitionjs <- readr::read_lines("js/transition.js")
htmlhead <-
paste('
<script>',
paste(transitionjs, collapse = "\n"),
'</script>
<script>',
paste(collapsejs, collapse = "\n"),
'</script>
<script>',
paste(codejs, collapse = "\n"),
'</script>
<style type="text/css">
.code-folding-btn { margin-bottom: 4px; }
.row { display: flex; }
.collapse { display: none; }
.in { display:block }
</style>
<script>
$(document).ready(function () {
window.initializeCodeFolding("show" === "hide");
});
</script>
', sep = "\n")
readr::write_lines(htmlhead, path = "header.html")
ca_counties <- counties("CA", cb = TRUE)
ca_tracts <- tracts("CA", cb = TRUE)
ca_bgs <- block_groups("CA", cb = TRUE)
county_neighbors <-
ca_counties %>%
filter(NAME %in% c(
"San Joaquin",
"Alameda",
"Sacramento",
"Santa Clara",
"Stanislaus",
"Contra Costa",
"San Francisco",
"San Mateo",
"Solano",
"Fresno",
"Placer",
"Yolo",
"Sonoma",
"Merced",
"Monterey"
))
pop_sjc <- data.frame(matrix(ncol=3,nrow=0))
colnames(pop_sjc) <- c("Population","Population15andolder","year")
for(year in 2010:2018){
temp <-
getCensus(
name = "acs/acs1",
vintage = year,
vars = c("B01003_001E"),
region = "county:077",
regionin = "state:06"
) %>%
mutate(
Population = B01003_001E,
year = year
) %>%
dplyr::select(
Population,
year
)
pop_sjc<- rbind(pop_sjc,temp)
}
sjc_projection <-
read_csv("C:/Users/Derek Ouyang/Google Drive/City Systems/Stockton Green Economy/SSP_asrc_STATEfiles/DATA-PROCESSED/SPLITPROJECTIONS/CA.csv") %>%
filter(COUNTY == "077") %>%
group_by(YEAR) %>%
summarize(
Population = sum(SSP2),
Population15andOlder = sum(SSP2[which(AGE > 3)])
) %>%
filter(YEAR %in% c(2020,2025,2030,2035,2040)) %>%
dplyr::select(Population, Population15andOlder, year = YEAR)
pop_sjc_w_projection <-
bind_rows(pop_sjc,sjc_projection)
emp_sjc <- data.frame(matrix(ncol=2,nrow=0))
colnames(emp_sjc) <- c("EmployedResidents","year")
for(year in 2010:2018){
temp <-
getCensus(
name = "acs/acs1/subject",
vintage = year,
vars = c("S2301_C01_001E","S2301_C03_001E","S2301_C04_001E"),
region = "county:077",
regionin = "state:06"
) %>%
mutate(
Population16andOlder = S2301_C01_001E,
PercEmployedResidents = S2301_C03_001E,
EmployedResidents = PercEmployedResidents/100*Population16andOlder,
UnemploymentRate = S2301_C04_001E,
year = year
) %>%
dplyr::select(
Population16andOlder,
PercEmployedResidents,
EmployedResidents,
UnemploymentRate,
year
)
emp_sjc<- rbind(emp_sjc,temp)
}
pop_emp_sjc_w_projection <-
pop_sjc_w_projection %>%
left_join(emp_sjc, by = "year") %>%
mutate(
PercEmployedResidents = ifelse(
!is.na(PercEmployedResidents),
PercEmployedResidents,
lm(
formula = `PercEmployedResidents`[1:9] ~ year[1:9]
)$coefficients[1]+
lm(
formula = `PercEmployedResidents`[1:9] ~ year[1:9]
)$coefficients[2]*year
),
EmployedResidents = ifelse(!is.na(EmployedResidents),EmployedResidents,Population15andOlder*PercEmployedResidents/100)
)
# sjc_wac <-
#   2010:2017 %>%
#   map(function(year){
#     ca_wac <-
#       grab_lodes(
#         state = "ca",
#         year = year,
#         lodes_type = "wac",
#         job_type = "JT01",
#         segment = "S000",
#         state_part = "main",
#         agg_geo = "bg"
#       )
#
#     temp <-
#       ca_wac %>%
#       filter(substr(w_bg,1,5) == "06077")
#
#     return(temp)
#   }) %>%
#   rbindlist()
#
# save(sjc_wac, file = "C:/Users/Derek Ouyang/Google Drive/City Systems/Stockton Green Economy/sjc_wac.Rdata")
load("C:/Users/Derek Ouyang/Google Drive/City Systems/Stockton Green Economy/sjc_wac.Rdata")
jobs_sjc <-
sjc_wac %>%
group_by(year) %>%
summarize(Jobs = sum(C000))
#Add 2018 jobs projection
jobs_sjc[9,1] <- 2018
jobs_sjc[9,2] <-
lm(formula = jobs_sjc$Jobs[1:8] ~ jobs_sjc$year[1:8])$coefficients[1]+
lm(formula = jobs_sjc$Jobs[1:8] ~ jobs_sjc$year[1:8])$coefficients[2]*2018
pop_jobs_sjc_w_projection <-
pop_emp_sjc_w_projection %>%
left_join(jobs_sjc, by = "year") %>%
mutate(
ratio = ifelse(
!is.na(Jobs),
Jobs/EmployedResidents,
lm(
formula = Jobs[1:9]/EmployedResidents[1:9] ~ year[1:9]
)$coefficients[1]+
lm(
formula = Jobs[1:9]/EmployedResidents[1:9] ~ year[1:9]
)$coefficients[2]*year
),
Jobs = ifelse(!is.na(Jobs),Jobs,EmployedResidents*ratio)
) %>%
transmute(
Year = year,
Population = Population,
Jobs = Jobs,
`Employed Residents` = EmployedResidents,
`J/ER Ratio` = ratio,
`Percent Employed Residents` = PercEmployedResidents,
`Percent Unemployment` = UnemploymentRate
)
pop_jobs_sjc_w_projection_table <-
pop_jobs_sjc_w_projection %>%
transmute(
Year = Year,
Population = prettyNum(round(Population,-3),big.mark=","),
Jobs = prettyNum(round(Jobs,-3),big.mark=","),
`Employed Residents` = prettyNum(round(`Employed Residents`,-3),big.mark=","),
`J/ER Ratio` = round(`J/ER Ratio`,2),
`Percent Employed Residents` = paste0(round(`Percent Employed Residents`),"%"),
`Percent Unemployment` = ifelse(is.na(`Percent Unemployment`),"NA",paste0(round(`Percent Unemployment`),"%"))
)
# save(pop_jobs_sjc_w_projection, file = "C:/Users/Derek Ouyang/Google Drive/City Systems/Stockton Green Economy/pop_jobs_sjc_w_projection.Rdata")
kable(
pop_jobs_sjc_w_projection_table,
booktabs = TRUE,
caption = 'Historical population and job counts for San Joaquin County 2010-2017, followed by projections to 2040.'
) %>%
kable_styling() %>%
scroll_box(width = "100%")
setwd("~/GitHub/greeneconomy")
rtd_gtfs <- read_gtfs("http://sjrtd.com/RTD-GTFS/RTD-GTFS.zip")
rtd_stops <-
st_as_sf(rtd_gtfs$stops,coords=c(6,5)) %>%
st_set_crs(4326) %>%
st_transform(projection)
rtd_stops_downtownstation <-
c("7258","7017","7155","7003","7006","7025")
rtd_stops_amtrak <-
c("7029","7032")
start_hour <- 16
end_hour <- 20
max_time_minutes <- 15
stop_times <- filter_stop_times(rtd_gtfs, "2020-03-30", start_hour*3600, end_hour*3600)
Sys.Date()
stop_times <- filter_stop_times(rtd_gtfs, Sys.Date(), start_hour*3600, end_hour*3600)
stop_frequency <-
get_stop_frequency(
rtd_gtfs,
start_hour,
end_hour
)
rptr <-
raptor(
stop_times,
rtd_gtfs$transfers,
rtd_stops_downtownstation,
departure_time_range = (end_hour-start_hour)*3600,
keep = "shortest"
)
rptr <-
raptor(
stop_times,
rtd_gtfs$transfers,
rtd_stops_downtownstation,
# departure_time_range = (end_hour-start_hour)*3600,
keep = "shortest"
)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (min_arrival_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = "stop_id") %>%
st_as_sf() %>%
left_join(stop_frequency, by = "stop_id") %>%
filter(departures >= (end_hour-start_hour)*3)
View(rptr)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (travel_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = "stop_id") %>%
st_as_sf() %>%
left_join(stop_frequency, by = "stop_id") %>%
filter(departures >= (end_hour-start_hour)*3)
View(stop_frequency)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (travel_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes)
View(downtown_accessible_stops)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (travel_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = c("from_stop_id"="stop_id"))
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (travel_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = c("from_stop_id"="stop_id")) %>%
st_as_sf() %>%
left_join(stop_frequency, by = c("from_stop_id"="stop_id")) %>%
filter(departures >= (end_hour-start_hour)*3)
downtown_accessible_zone <-
1:nrow(downtown_accessible_stops) %>%
map_dfr(function(row){
downtown_accessible_stops[row,] %>%
st_buffer(downtown_accessible_stops$walking_time_minutes[row]/20*5280) %>% # convert minutes to ft assuming 20 minutes per mile walking
as.data.frame()
}) %>%
st_as_sf() %>%
st_set_crs(projection)
downtown_accessible_adus <-
clean_buildable_area[which(clean_buildable_area$APN %in% st_centroid(clean_buildable_area)[downtown_accessible_zone,]$APN),]
mapview(downtown_accessible_zone)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (travel_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (journey_arrival_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = c("from_stop_id"="stop_id")) %>%
st_as_sf() %>%
left_join(stop_frequency, by = c("from_stop_id"="stop_id")) %>%
filter(departures >= (end_hour-start_hour)*3)
downtown_accessible_zone <-
1:nrow(downtown_accessible_stops) %>%
map_dfr(function(row){
downtown_accessible_stops[row,] %>%
st_buffer(downtown_accessible_stops$walking_time_minutes[row]/20*5280) %>% # convert minutes to ft assuming 20 minutes per mile walking
as.data.frame()
}) %>%
st_as_sf() %>%
st_set_crs(projection)
mapview(downtown_accessible_zone)
mapview(rtd_stops)
rptr <-
raptor(
stop_times,
rtd_gtfs$transfers,
rtd_stops_downtownstation,
departure_time_range = (end_hour-start_hour)*3600,
keep = "shortest"
)
?raptor
rptr <-
raptor(
stop_times,
rtd_gtfs$transfers,
rtd_stops_downtownstation,
time_range = (end_hour-start_hour)*3600,
keep = "shortest"
)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (journey_arrival_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = c("from_stop_id"="stop_id")) %>%
st_as_sf() %>%
left_join(stop_frequency, by = c("from_stop_id"="stop_id")) %>%
filter(departures >= (end_hour-start_hour)*3)
downtown_accessible_zone <-
1:nrow(downtown_accessible_stops) %>%
map_dfr(function(row){
downtown_accessible_stops[row,] %>%
st_buffer(downtown_accessible_stops$walking_time_minutes[row]/20*5280) %>% # convert minutes to ft assuming 20 minutes per mile walking
as.data.frame()
}) %>%
st_as_sf() %>%
st_set_crs(projection)
mapview(downtown_accessible_zone)
stop_times <- filter_stop_times(rtd_gtfs, Sys.Date()-7, start_hour*3600, end_hour*3600)
rtd_gtfs
View(rtd_gtfs)
rtd_gtfs <- read_gtfs("http://sjrtd.com/RTD-GTFS/20180120-GTFS/RTD-GTFS.zip")
View(rtd_gtfs)
rtd_gtfs <- read_gtfs("http://sjrtd.com/RTD-GTFS/	20200320-GTFS-precovid//RTD-GTFS.zip")
rtd_gtfs <- read_gtfs("http://sjrtd.com/RTD-GTFS/	20200320-GTFS-precovid/RTD-GTFS.zip")
rtd_gtfs <- read_gtfs("http://sjrtd.com/RTD-GTFS/20200320-GTFS-precovid/RTD-GTFS.zip")
View(rtd_gtfs)
rtd_stops <-
st_as_sf(rtd_gtfs$stops,coords=c(6,5)) %>%
st_set_crs(4326) %>%
st_transform(projection)
rtd_stops_downtownstation <-
c("7258","7017","7155","7003","7006","7025")
rtd_stops_amtrak <-
c("7029","7032")
start_hour <- 16
end_hour <- 20
max_time_minutes <- 15
stop_times <- filter_stop_times(rtd_gtfs, "2020-03-26", start_hour*3600, end_hour*3600)
stop_frequency <-
get_stop_frequency(
rtd_gtfs,
start_hour,
end_hour
)
rptr <-
raptor(
stop_times,
rtd_gtfs$transfers,
rtd_stops_downtownstation,
time_range = (end_hour-start_hour)*3600,
keep = "shortest"
)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (journey_arrival_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = c("from_stop_id"="stop_id")) %>%
st_as_sf() %>%
left_join(stop_frequency, by = c("from_stop_id"="stop_id")) %>%
filter(departures >= (end_hour-start_hour)*3)
downtown_accessible_zone <-
1:nrow(downtown_accessible_stops) %>%
map_dfr(function(row){
downtown_accessible_stops[row,] %>%
st_buffer(downtown_accessible_stops$walking_time_minutes[row]/20*5280) %>% # convert minutes to ft assuming 20 minutes per mile walking
as.data.frame()
}) %>%
st_as_sf() %>%
st_set_crs(projection)
max_time_minutes <- 30
stop_times <- filter_stop_times(rtd_gtfs, "2020-03-26", start_hour*3600, end_hour*3600)
stop_frequency <-
get_stop_frequency(
rtd_gtfs,
start_hour,
end_hour
)
rptr <-
raptor(
stop_times,
rtd_gtfs$transfers,
rtd_stops_downtownstation,
time_range = (end_hour-start_hour)*3600,
keep = "shortest"
)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (journey_arrival_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = c("from_stop_id"="stop_id")) %>%
st_as_sf() %>%
left_join(stop_frequency, by = c("from_stop_id"="stop_id")) %>%
filter(departures >= (end_hour-start_hour)*3)
downtown_accessible_zone <-
1:nrow(downtown_accessible_stops) %>%
map_dfr(function(row){
downtown_accessible_stops[row,] %>%
st_buffer(downtown_accessible_stops$walking_time_minutes[row]/20*5280) %>% # convert minutes to ft assuming 20 minutes per mile walking
as.data.frame()
}) %>%
st_as_sf() %>%
st_set_crs(projection)
mapview(downtown_accessible_zone)
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (journey_arrival_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = c("to_stop_id"="stop_id")) %>%
st_as_sf() %>%
left_join(stop_frequency, by = c("to_stop_id"="stop_id")) %>%
filter(departures >= (end_hour-start_hour)*3)
max_time_minutes <- 15
downtown_accessible_stops <-
rptr %>%
mutate(
travel_time_minutes = (journey_arrival_time-journey_departure_time)/60,
walking_time_minutes = max_time_minutes - travel_time_minutes
) %>%
filter(travel_time_minutes <= max_time_minutes) %>%
left_join(rtd_stops, by = c("to_stop_id"="stop_id")) %>%
st_as_sf() %>%
left_join(stop_frequency, by = c("to_stop_id"="stop_id")) %>%
filter(departures >= (end_hour-start_hour)*3)
downtown_accessible_zone <-
1:nrow(downtown_accessible_stops) %>%
map_dfr(function(row){
downtown_accessible_stops[row,] %>%
st_buffer(downtown_accessible_stops$walking_time_minutes[row]/20*5280) %>% # convert minutes to ft assuming 20 minutes per mile walking
as.data.frame()
}) %>%
st_as_sf() %>%
st_set_crs(projection)
mapview(downtown_accessible_zone)
routes <-
get_route_geometry(
rtd_gtfs %>% gtfs_as_sf(),
route_ids = downtown_accessible_stops$route_id,
service_ids = downtown_accessible_stops$service_id
) %>%
st_transform(projection)
downtownstation_stops <-
downtown_accessible_stops %>%
filter(stop_id %in% rtd_stops_downtownstation)
downtownstation_stops <-
downtown_accessible_stops %>%
filter(to_stop_id %in% rtd_stops_downtownstation)
mapview(downtownstation_stops)
